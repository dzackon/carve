%======================================================%
% Lemmas
%======================================================%

%------------------------------------------------------%
% Structural properties of typing judgment
%------------------------------------------------------%

% Exchange lemma:
% If Œî ‚ä¢ M : A and Œî[(n, x) ‚Üî (m, y)] = Œî', then Œî' ‚ä¢ M : A

rec oft_exch : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]]) [Œ® ‚ä¢ oft Œî M C] ‚Üí [Œ® ‚ä¢ exch Œî n X m Y Œî']
‚Üí [Œ® ‚ä¢ oft Œî' M C] =
  / total 1 /
  fn d, ex1 ‚áí
  let [_ ‚ä¢ exch/u NEQ[] U1 U2] = ex1 in
  case d of
  | [_ ‚ä¢ oft/var U3 E1] ‚áí
    let [_ ‚ä¢ exch-e EX1' EX2' U4 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ U1] [_ ‚ä¢ U2] [_ ‚ä¢ U3] in
    let [_ ‚ä¢ E2] = exch_exh [_ ‚ä¢ E1] [_ ‚ä¢ exch/u NEQ[] EX1' EX2'] in
    [_ ‚ä¢ oft/var U4 E2]
  | [_ ‚ä¢ oft/vari U3 E1] ‚áí
    let [_ ‚ä¢ U3'] = upd_refl [_ ‚ä¢ U3] in
    let [_ ‚ä¢ exch-e EX1' EX2' U4 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ U1] [_ ‚ä¢ U2] [_ ‚ä¢ U3'] in
    let [_ ‚ä¢ E2] = exch_exh [_ ‚ä¢ E1] [_ ‚ä¢ exch/u NEQ[] EX1' EX2'] in
    let [_ ‚ä¢ cx/refl] = upd_refl2 [_ ‚ä¢ U4] in
    [_ ‚ä¢ oft/vari U4 E2]
  | [_ ‚ä¢ oft/lam \x.D1] ‚áí
    let [_,x:obj ‚ä¢ D2] = oft_exch [_,x:obj ‚ä¢ D1] [_,x:obj ‚ä¢ exch/u NEQ[] (upd/n U1[..]) (upd/n U2[..])] in
    [_ ‚ä¢ oft/lam \x.D2]
  | [_ ‚ä¢ oft/app D1 D2 M1] ‚áí
    let [_ ‚ä¢ exch-mg U1a U2a U1b U2b _ M2 _ _ _ _ _] = exch_merge [_ ‚ä¢ U1] [_ ‚ä¢ U2] [_ ‚ä¢ M1] in
    let [_ ‚ä¢ D1'] = oft_exch [_ ‚ä¢ D1] [_ ‚ä¢ exch/u NEQ[] U1a U2a] in
    let [_ ‚ä¢ D2'] = oft_exch [_ ‚ä¢ D2] [_ ‚ä¢ exch/u NEQ[] U1b U2b] in
    [_ ‚ä¢ oft/app D1' D2' M2]
  | [_ ‚ä¢ oft/bang E1 D1] ‚áí
    let [_ ‚ä¢ E2] = exch_exh [_ ‚ä¢ E1] ex1 in
    let [_ ‚ä¢ D2] = oft_exch [_ ‚ä¢ D1] ex1 in
    [_ ‚ä¢ oft/bang E2 D2]
  | [_ ‚ä¢ oft/letbang D1 (\x.D2) M1] ‚áí
    let [_ ‚ä¢ exch-mg U1a U2a U1b U2b _ M2 _ _ _ _ _] = exch_merge [_ ‚ä¢ U1] [_ ‚ä¢ U2] [_ ‚ä¢ M1] in
    let [_ ‚ä¢ D1'] = oft_exch [_ ‚ä¢ D1] [_ ‚ä¢ exch/u NEQ[] U1a U2a] in
    let [_,x:obj ‚ä¢ D2'] = oft_exch [_,x:obj ‚ä¢ D2] [_,x:obj ‚ä¢ exch/u NEQ[] (upd/n U1b[..]) (upd/n U2b[..])] in
    [_ ‚ä¢ oft/letbang D1' (\x.D2') M2]
  ;

rec oft_exch_top : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]]) [Œ® ‚ä¢ oft (cons (cons Œî X A[] Œ±[]) Y B[] Œ≤[]) M C]
‚Üí [Œ® ‚ä¢ oft (cons (cons Œî Y B[] Œ≤[]) X A[] Œ±[]) M C] =
  / total /
  fn oft1 ‚áí oft_exch oft1 (exch_top [_ ‚ä¢ _] [_ ‚ä¢ _] [ ‚ä¢ _] [ ‚ä¢ _] [_ ‚ä¢ _] [ ‚ä¢ _] [ ‚ä¢ _])
  ;

% Intuitionistic strengthening lemmas:
% (1) If Œî, x :‚Å∞ A ‚ä¢ M : C, then (1) M does not depend on x and (2) Œî ‚ä¢ M : C
% (2) If Œî, x :œâ A ‚ä¢ M : C and x ‚àâ fv(M), then Œî ‚ä¢ M : C

inductive StrTop: (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]]) {D:[Œ® ‚ä¢ oft Œî M A[]]} ctype =
  | Str-Top : [Œ® ‚ä¢ oft Œî M A[]] ‚Üí {D:[Œ®,x:obj ‚ä¢ oft (cons Œî[..] x B[] ùüò) M[..] A[]]} StrTop [Œ®,x:obj ‚ä¢ D]
  ;

rec oft_str0 : {D:[Œ®,x:obj ‚ä¢ oft (cons Œî[..] x B[] ùüò) M A[]]} StrTop [Œ®,x:obj ‚ä¢ D] =
  / total d (oft_str0 d) /
  mlam D ‚áí case [_,x:obj ‚ä¢ D] of
  | [_,x:obj ‚ä¢ oft/var (upd/n U1) (exh/c E1 _)] ‚áí
    let Prune-Upd [_ ‚ä¢ U2] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let [_ ‚ä¢ E2] = prune_exh [_ ‚ä¢ E1] in
    Str-Top [_ ‚ä¢ oft/var U2 E2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/vari (upd/n U1) (exh/c E1 _)] ‚áí
    let [_,x:obj ‚ä¢ U1'] = upd_refl [_,x:obj ‚ä¢ U1] in
    let Prune-Upd [_ ‚ä¢ U2] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1'] in
    let [_ ‚ä¢ E2] = prune_exh [_,x:obj ‚ä¢ E1] in
    Str-Top [_ ‚ä¢ oft/vari U2 E2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/lam \y.D1] ‚áí
    let [_,x:obj,y:obj ‚ä¢ D1'[..,y,x]] = oft_exch_top [_,x:obj,y:obj ‚ä¢ D1] in
    let Str-Top [_,x:obj ‚ä¢ D2] [_,x:obj,y:obj ‚ä¢ _] = oft_str0 [_,x:obj,y:obj ‚ä¢ D1'] in
    Str-Top [_ ‚ä¢ oft/lam \x.D2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/app D1 D2 (mg/c M1 T[])] ‚áí
    let [ ‚ä¢ mult/refl] = mult_zsfree_cor [ ‚ä¢ T] in
    let [ ‚ä¢ mult/refl] = mult_zsfree_cor (mult_comm [ ‚ä¢ T]) in
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let Str-Top [_ ‚ä¢ D1'] [_,x:obj ‚ä¢ _] = oft_str0 [_,x:obj ‚ä¢ D1] in
    let Str-Top [_ ‚ä¢ D2'] [_,x:obj ‚ä¢ _] = oft_str0 [_,x:obj ‚ä¢ D2] in
    Str-Top [_ ‚ä¢ oft/app D1' D2' M2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/bang (exh/c E1 _) D1] ‚áí
    let [_ ‚ä¢ E2] = prune_exh [_,x:obj ‚ä¢ E1] in
    let Str-Top [_ ‚ä¢ D2] [_,x:obj ‚ä¢ _] = oft_str0 [_,x:obj ‚ä¢ D1] in
    Str-Top [_ ‚ä¢ oft/bang E2 D2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/letbang D1 (\y.D2) (mg/c M1 T[])] ‚áí
    let [ ‚ä¢ mult/refl] = mult_zsfree_cor [ ‚ä¢ T] in
    let [ ‚ä¢ mult/refl] = mult_zsfree_cor (mult_comm [ ‚ä¢ T]) in
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let Str-Top [_ ‚ä¢ D1'] [_,x:obj ‚ä¢ _] = oft_str0 [_,x:obj ‚ä¢ D1] in
    let [_,x:obj,y:obj ‚ä¢ D2''[..,y,x]] = oft_exch_top [_,x:obj,y:obj ‚ä¢ D2] in
    let Str-Top [_,x:obj ‚ä¢ D2'] [_,x:obj,y:obj ‚ä¢ _] = oft_str0 [_,x:obj,y:obj ‚ä¢ D2''] in
    Str-Top [_ ‚ä¢ oft/letbang D1' (\y.D2') M2] [_,x:obj ‚ä¢ _]
  ;

rec oft_strœâ : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]]) [Œ®,x:obj ‚ä¢ oft (cons Œî[..] x A[] œâ) M[..] C[]]
‚Üí [Œ® ‚ä¢ oft Œî[..] M C[]] =
  / total d (oft_strœâ d) /
  fn d ‚áí case d of
  | [_,x:obj ‚ä¢ oft/var (upd/n U1) (exh/c E1 _)] ‚áí
    let Prune-Upd [_ ‚ä¢ U2] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let [_ ‚ä¢ E2] = prune_exh [_,x:obj ‚ä¢ E1] in
    [_ ‚ä¢ oft/var U2 E2]
  | [_,x:obj ‚ä¢ oft/vari (upd/n U1) (exh/c E1 _)] ‚áí
    let [_,x:obj ‚ä¢ U1'] = upd_refl [_,x:obj ‚ä¢ U1] in
    let Prune-Upd [_ ‚ä¢ U2] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1'] in
    let [_ ‚ä¢ E2] = prune_exh [_,x:obj ‚ä¢ E1] in
    [_ ‚ä¢ oft/vari U2 E2]
  | [_,x:obj ‚ä¢ oft/lam \y.D1] ‚áí
    let [_,x:obj,y:obj ‚ä¢ D1'[..,y,x]] = oft_exch_top [_,x:obj,y:obj ‚ä¢ D1] in
    let [_,x:obj ‚ä¢ D2] = oft_strœâ [_,x:obj,y:obj ‚ä¢ D1'] in
    [_ ‚ä¢ oft/lam \x.D2]
  | [_,x:obj ‚ä¢ oft/app D1 D2 (mg/c M1 ‚Ä¢/œâœâ)] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let [_ ‚ä¢ D1'] = oft_strœâ [_,x:obj ‚ä¢ D1] in
    let [_ ‚ä¢ D2'] = oft_strœâ [_,x:obj ‚ä¢ D2] in
    [_ ‚ä¢ oft/app D1' D2' M2]
  | [_,x:obj ‚ä¢ oft/bang (exh/c E1 _) D1] ‚áí
    let [_ ‚ä¢ E2] = prune_exh [_,x:obj ‚ä¢ E1] in
    let [_ ‚ä¢ D1'] = oft_strœâ [_,x:obj ‚ä¢ D1] in
    [_ ‚ä¢ oft/bang E2 D1']
  | [_,x:obj ‚ä¢ oft/letbang D1 (\y.D2) (mg/c M1 ‚Ä¢/œâœâ)] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let [_ ‚ä¢ D1'] = oft_strœâ [_,x:obj ‚ä¢ D1] in
    let [_,x:obj,y:obj ‚ä¢ D2''[..,y,x]] = oft_exch_top [_,x:obj,y:obj ‚ä¢ D2] in
    let [_,x:obj ‚ä¢ D2'] = oft_strœâ [_,x:obj,y:obj ‚ä¢ D2''] in
    [_ ‚ä¢ oft/letbang D1' (\x.D2') M2]
  ;

% Intuitionistic weakening lemmas:
% (1) If Œî ‚ä¢ M : C and unr(Œ±), then Œî, x :Œ± A ‚ä¢ M : C for any A
% (2) If Œî ‚ä¢ M : C and unr(Œ±), then Œî[x :‚Å∞ A ‚Ü¶‚Çô y :Œ± A'] ‚ä¢ M : C for any y,A'

rec oft_weak : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]]) [Œ® ‚ä¢ oft Œî M C[]]
‚Üí {A:[ ‚ä¢ tp]} [ ‚ä¢ hal Œ±] ‚Üí [Œ®,x:obj ‚ä¢ oft (cons Œî[..] x A[] Œ±[]) M[..] C[]] =
  / total 1 /
  fn d ‚áí mlam A ‚áí fn u ‚áí
  let [ ‚ä¢ U] = u in
  let [ ‚ä¢ T] = mult_hal_id u in
  case d of
  | [_ ‚ä¢ oft/var U1 E1] ‚áí [_ ‚ä¢ oft/var (upd/n U1[..]) (exh/c E1[..] U[])]
  | [_ ‚ä¢ oft/vari U1 E1] ‚áí [_ ‚ä¢ oft/vari (upd/n U1[..]) (exh/c E1[..] U[])]
  | [_ ‚ä¢ oft/lam \x.D1] ‚áí
    let [_,x:obj,y:obj ‚ä¢ D1'] = oft_exch_top (oft_weak [_,x:obj ‚ä¢ D1] [ ‚ä¢ A] u) in
    [_,x:obj ‚ä¢ oft/lam \y.D1'[..,y,x]]
  | [_ ‚ä¢ oft/app D1 D2 M1] ‚áí
    let [_,x:obj ‚ä¢ D1'] = oft_weak [_ ‚ä¢ D1] [ ‚ä¢ A] u in
    let [_,x:obj ‚ä¢ D2'] = oft_weak [_ ‚ä¢ D2] [ ‚ä¢ A] u in
    [_,x:obj ‚ä¢ oft/app D1' D2' (mg/c M1[..] T[])]
  | [_ ‚ä¢ oft/bang E1 D1] ‚áí
    let [_,x:obj ‚ä¢ D1'] = oft_weak [_ ‚ä¢ D1] [ ‚ä¢ A] u in
    [_,x:obj ‚ä¢ oft/bang (exh/c E1[..] U[]) D1']
  | [_ ‚ä¢ oft/letbang D1 (\x.D2) M1] ‚áí
    let [_,x:obj ‚ä¢ D1'] = oft_weak [_ ‚ä¢ D1] [ ‚ä¢ A] u in
    let [_,x:obj,y:obj ‚ä¢ D2'] = oft_exch_top (oft_weak [_,x:obj ‚ä¢ D2] [ ‚ä¢ A] u) in
    [_,x:obj ‚ä¢ oft/letbang D1' (\y.D2'[..,y,x]) (mg/c M1[..] T[])]
  ;

rec oft_weak_upd : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]]) [Œ® ‚ä¢ oft Œî M C[]]
‚Üí [Œ® ‚ä¢ upd Œî n[] X X' A[] A'[] ùüò Œ±[] Œî'] ‚Üí [ ‚ä¢ hal Œ±] ‚Üí [Œ® ‚ä¢ oft Œî' M C[]] =
  / total 1 /
  fn d, u, un ‚áí
  let [_ ‚ä¢ U] = u in
  let [ ‚ä¢ get-hal‚àô UN1 UN2 T1] = mult_get_hal un in
  case d of
  | [_ ‚ä¢ oft/var U1 E1] ‚áí
    let [_ ‚ä¢ look-neq N[] _ _] = comp_look [_ ‚ä¢ U] [_ ‚ä¢ U1] in
    let [_ ‚ä¢ upd-po U2 U3 _ _] = upd_pushout [_ ‚ä¢ U] [_ ‚ä¢ U1] [ ‚ä¢ N] in
    let [_ ‚ä¢ E2] = exh_changetp [_ ‚ä¢ E1] un [_ ‚ä¢ U3] in
    [_ ‚ä¢ oft/var U2 E2]
  | [_ ‚ä¢ oft/vari U1 E1] ‚áí
    let [_ ‚ä¢ look-neq N[] _ _] = comp_look [_ ‚ä¢ U] [_ ‚ä¢ U1] in
    let [_ ‚ä¢ lookintm U2] = lookup_upd u [_ ‚ä¢ U1] [ ‚ä¢ N] in
    let [_ ‚ä¢ E2] = exh_changetp [_ ‚ä¢ E1] un u in
    [_ ‚ä¢ oft/vari U2 E2]
  | [_ ‚ä¢ oft/lam \x.D1] ‚áí
    let [_,x:obj ‚ä¢ D2] = oft_weak_upd [_,x:obj ‚ä¢ D1] [_,x:obj ‚ä¢ upd/n U[..]] un in
    [_ ‚ä¢ oft/lam \x.D2]
  | [_ ‚ä¢ oft/app D1 D2 M1] ‚áí
    let [_ ‚ä¢ merge-upd U1 U2 T2[] M2 _ _ _] = merge_upd_cor [_ ‚ä¢ U] [_ ‚ä¢ M1] [ ‚ä¢ T1] in
    let [ ‚ä¢ mult/refl] = mult_zsfree_cor [ ‚ä¢ T2] in
    let [ ‚ä¢ mult/refl] = mult_zsfree_cor (mult_comm [ ‚ä¢ T2]) in
    let [_ ‚ä¢ D1'] = oft_weak_upd [_ ‚ä¢ D1] [_ ‚ä¢ U1] [ ‚ä¢ UN1] in
    let [_ ‚ä¢ D2'] = oft_weak_upd [_ ‚ä¢ D2] [_ ‚ä¢ U2] [ ‚ä¢ UN2] in
    [_ ‚ä¢ oft/app D1' D2' M2]
  | [_ ‚ä¢ oft/bang E1 D1] ‚áí
    let [_ ‚ä¢ E2] = exh_changetp [_ ‚ä¢ E1] un u in
    let [_ ‚ä¢ D2] = oft_weak_upd [_ ‚ä¢ D1] u un in
    [_ ‚ä¢ oft/bang E2 D2]
  | [_ ‚ä¢ oft/letbang D1 (\x.D2) M1] ‚áí
    let [_ ‚ä¢ merge-upd U1 U2 T2[] M2 _ _ _] = merge_upd_cor [_ ‚ä¢ U] [_ ‚ä¢ M1] [ ‚ä¢ T1] in
    let [ ‚ä¢ mult/refl] = mult_zsfree_cor [ ‚ä¢ T2] in
    let [ ‚ä¢ mult/refl] = mult_zsfree_cor (mult_comm [ ‚ä¢ T2]) in
    let [_ ‚ä¢ D1'] = oft_weak_upd [_ ‚ä¢ D1] [_ ‚ä¢ U1] [ ‚ä¢ UN1] in
    let [_,x:obj ‚ä¢ D2'] = oft_weak_upd [_,x:obj ‚ä¢ D2] [_,x:obj ‚ä¢ upd/n U2[..]] [ ‚ä¢ UN2] in
    [_ ‚ä¢ oft/letbang D1' (\x.D2') M2]
  ;

% Environment weakening lemma (dereliction): If Œî ‚ä¢ M : C, then Œî[x :¬π A ‚Ü¶ x :œâ A] ‚ä¢ M : C

rec oft_weak_env : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx K[]]) [Œ® ‚ä¢ oft Œî M C[]]
‚Üí [Œ® ‚ä¢ upd Œî n[] X X A[] A[] ùüô œâ Œî'] ‚Üí [Œ® ‚ä¢ oft Œî' M C[]] =
  / total 1 /
  fn d, u ‚áí
  let [_ ‚ä¢ U] = u in
  case d of
  | [_ ‚ä¢ oft/var U1 E1] ‚áí
    (case comp_look [_ ‚ä¢ U1] [_ ‚ä¢ U] of
    | [_ ‚ä¢ look-eq _ _] ‚áí
      let [_ ‚ä¢ U'] = upd_symm u in
      let [_ ‚ä¢ E2] = exh_changetp [_ ‚ä¢ E1] [ ‚ä¢ hal/œâ] (upd_trans (upd_symm [_ ‚ä¢ U1]) u) in
      [_ ‚ä¢ oft/vari U' E2]
    | [_ ‚ä¢ look-neq N[] _ _] ‚áí
      let [_ ‚ä¢ lookintm U2] = lookup_upd [_ ‚ä¢ U1] [_ ‚ä¢ U] [ ‚ä¢ N] in
      impossible exh_lookup [_ ‚ä¢ E1] [_ ‚ä¢ U2]
    )
  | [_ ‚ä¢ oft/vari U1 E1] ‚áí impossible exh_lookup [_ ‚ä¢ E1] u
  | [_ ‚ä¢ oft/lam \x.D1] ‚áí
    let [_,x:obj ‚ä¢ D2] = oft_weak_env [_,x:obj ‚ä¢ D1] [_,x:obj ‚ä¢ upd/n U[..]] in
    [_ ‚ä¢ oft/lam \x.D2]
  | [_ ‚ä¢ oft/app D1 D2 M1] ‚áí
    let [_ ‚ä¢ merge-upd U1 U2 T1[] M2 _ _ _] = merge_upd_cor [_ ‚ä¢ U] [_ ‚ä¢ M1] [ ‚ä¢ ‚Ä¢/œâœâ] in
    (case [ ‚ä¢ T1] of
    | [ ‚ä¢ ‚Ä¢/01] ‚áí
      let [_ ‚ä¢ D1'] = oft_weak_upd [_ ‚ä¢ D1] [_ ‚ä¢ U1] [ ‚ä¢ hal/œâ] in
      let [_ ‚ä¢ D2'] = oft_weak_env [_ ‚ä¢ D2] [_ ‚ä¢ U2] in
      [_ ‚ä¢ oft/app D1' D2' M2]
    | [ ‚ä¢ ‚Ä¢/10] ‚áí
      let [_ ‚ä¢ D1'] = oft_weak_env [_ ‚ä¢ D1] [_ ‚ä¢ U1] in
      let [_ ‚ä¢ D2'] = oft_weak_upd [_ ‚ä¢ D2] [_ ‚ä¢ U2] [ ‚ä¢ hal/œâ] in
      [_ ‚ä¢ oft/app D1' D2' M2]
    )
  | [_ ‚ä¢ oft/bang E1 D1] ‚áí impossible exh_lookup [_ ‚ä¢ E1] u
  | [_ ‚ä¢ oft/letbang D1 (\x.D2) M1] ‚áí
    let [_ ‚ä¢ merge-upd U1 U2 T1[] M2 _ _ _] = merge_upd_cor [_ ‚ä¢ U] [_ ‚ä¢ M1] [ ‚ä¢ ‚Ä¢/œâœâ] in
    (case [ ‚ä¢ T1] of
    | [ ‚ä¢ ‚Ä¢/01] ‚áí
      let [_ ‚ä¢ D1'] = oft_weak_upd [_ ‚ä¢ D1] [_ ‚ä¢ U1] [ ‚ä¢ hal/œâ] in
      let [_,x:obj ‚ä¢ D2'] = oft_weak_env [_,x:obj ‚ä¢ D2] [_,x:obj ‚ä¢ upd/n U2[..]] in
      [_ ‚ä¢ oft/letbang D1' (\x.D2') M2]
    | [ ‚ä¢ ‚Ä¢/10] ‚áí
      let [_ ‚ä¢ D1'] = oft_weak_env [_ ‚ä¢ D1] [_ ‚ä¢ U1] in
      let [_,x:obj ‚ä¢ D2'] = oft_weak_upd [_,x:obj ‚ä¢ D2] [_,x:obj ‚ä¢ upd/n U2[..]] [ ‚ä¢ hal/œâ] in
      [_ ‚ä¢ oft/letbang D1' (\x.D2') M2]
    )
  ;

%------------------------------------------------------%
% Main lemmas
%------------------------------------------------------%

% Substitution lemmas:
% (1) Linear cut: If (a) Œî‚ÇÅ, x :¬π A ‚ä¢ M : C, (b) Œî‚ÇÇ ‚ä¢ N : A, and (c) Œî‚ÇÅ ‚ãà Œî‚ÇÇ = Œî, then Œî ‚ä¢ [N/x]M : C
% (2) Intuitionistic cut:  If (a) Œî‚ÇÅ, x :œâ A ‚ä¢ M : C, (b) Œî‚ÇÇ ‚ä¢ N : A, (c) exh(Œî‚ÇÇ), and (d) Œî‚ÇÅ ‚ãà Œî‚ÇÇ = Œî, then Œî ‚ä¢ [N/x]M : C

rec sub_lem : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx k[]]) [Œ®,x:obj ‚ä¢ oft (cons Œî‚ÇÅ[..] x A[] ùüô) M C[]]
‚Üí [Œ® ‚ä¢ oft Œî‚ÇÇ N A[]] ‚Üí [Œ® ‚ä¢ merge Œî‚ÇÅ Œî‚ÇÇ Œî]
‚Üí [Œ® ‚ä¢ oft Œî M[..,N] C[]] =
  / total d (sub_lem d) /
  fn d1, d2, m ‚áí
  let [_ ‚ä¢ M] = m in
  case d1 of
  | [_,x:obj ‚ä¢ oft/var U1 E1] ‚áí
    (case [_,x:obj ‚ä¢ U1] of
    | [_,x:obj ‚ä¢ upd/t _] ‚áí
      let [_,x:obj ‚ä¢ exh/c E1' _] = [_,x:obj ‚ä¢ E1] in
      let [_ ‚ä¢ cx/refl] = merge_id m (prune_exh [_,x:obj ‚ä¢ E1']) in
      d2
    | [_,x:obj ‚ä¢ upd/n U2] ‚áí let [_,x:obj ‚ä¢ exh/c _ UN[]] = [_,x:obj ‚ä¢ E1] in impossible [ ‚ä¢ UN]
    )
  | [_,x:obj ‚ä¢ oft/vari (upd/n _) (exh/c _ UN[])] ‚áí impossible [ ‚ä¢ UN]
  | [_,x:obj ‚ä¢ oft/lam \y.D1] ‚áí
    let [_,y:obj,x:obj ‚ä¢ D1'[..,x,y]] = oft_exch_top [_,x:obj,y:obj ‚ä¢ D1] in
    let [_,x:obj ‚ä¢ D2] = sub_lem [_,x:obj,y:obj ‚ä¢ D1'] (oft_weak d2 [ ‚ä¢ _] [ ‚ä¢ hal/0]) [_,x:obj ‚ä¢ mg/c M[..] ‚Ä¢/10] in
    [_ ‚ä¢ oft/lam \x.D2]
  | [_,x:obj ‚ä¢ oft/app D1 D2 (mg/c M1 T[])] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    (case [ ‚ä¢ T] of
    | [ ‚ä¢ ‚Ä¢/01] ‚áí
      let [_ ‚ä¢ mg-assoc M3 M4 _ _] = merge_assoc [_ ‚ä¢ M] [_ ‚ä¢ M2] in
      let Str-Top [_ ‚ä¢ D1'] [_,x:obj ‚ä¢ _] = oft_str0 [_,x:obj ‚ä¢ D1] in
      let [_ ‚ä¢ D2'] = sub_lem [_,x:obj ‚ä¢ D2] d2 [_ ‚ä¢ M3] in
      [_ ‚ä¢ oft/app D1' D2' M4]
    | [ ‚ä¢ ‚Ä¢/10] ‚áí
      let [_ ‚ä¢ M2_comm] = merge_comm [_ ‚ä¢ M2] in
      let [_ ‚ä¢ mg-assoc M3 M4_comm _ _] = merge_assoc [_ ‚ä¢ M] [_ ‚ä¢ M2_comm] in
      let [_ ‚ä¢ M4] = merge_comm [_ ‚ä¢ M4_comm] in
      let Str-Top [_ ‚ä¢ D2'] [_,x:obj ‚ä¢ _] = oft_str0 [_,x:obj ‚ä¢ D2] in
      let [_ ‚ä¢ D1'] = sub_lem [_,x:obj ‚ä¢ D1] d2 [_ ‚ä¢ M3] in
      [_ ‚ä¢ oft/app D1' D2' M4]
    )
  | [_,x:obj ‚ä¢ oft/bang (exh/c _ UN[]) _] ‚áí impossible [ ‚ä¢ UN]
  | [_,x:obj ‚ä¢ oft/letbang D1 (\y.D2) (mg/c M1 T[])] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let [_,y:obj,x:obj ‚ä¢ D2''[..,x,y]] = oft_exch_top [_,x:obj,y:obj ‚ä¢ D2] in
    (case [ ‚ä¢ T] of
    | [ ‚ä¢ ‚Ä¢/01] ‚áí
      let [_ ‚ä¢ mg-assoc M3 M4 _ _] = merge_assoc [_ ‚ä¢ M] [_ ‚ä¢ M2] in
      let Str-Top [_ ‚ä¢ D1'] [_,x:obj ‚ä¢ _] = oft_str0 [_,x:obj ‚ä¢ D1] in
      let [_,x:obj ‚ä¢ D2'] = sub_lem [_,x:obj,y:obj ‚ä¢ D2''] (oft_weak d2 [ ‚ä¢ _] [ ‚ä¢ hal/œâ]) [_,x:obj ‚ä¢ mg/c M3[..] ‚Ä¢/œâœâ] in
      [_ ‚ä¢ oft/letbang D1' (\x.D2') M4]
    | [ ‚ä¢ ‚Ä¢/10] ‚áí
      let [_ ‚ä¢ M2_comm] = merge_comm [_ ‚ä¢ M2] in
      let [_ ‚ä¢ mg-assoc M3 M4_comm _ _] = merge_assoc [_ ‚ä¢ M] [_ ‚ä¢ M2_comm] in
      let [_ ‚ä¢ M4] = merge_comm [_ ‚ä¢ M4_comm] in
      let [_ ‚ä¢ D1'] = sub_lem [_,x:obj ‚ä¢ D1] d2 [_ ‚ä¢ M3] in
      let Str-Top [_,x:obj ‚ä¢ D2'] [_,x:obj,y:obj ‚ä¢ _] = oft_str0 [_,x:obj,y:obj ‚ä¢ D2''] in
      [_ ‚ä¢ oft/letbang D1' (\x.D2') M4]
    )
  ;

rec sub_lemœâ : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx k[]]) [Œ®,x:obj ‚ä¢ oft (cons Œî‚ÇÅ[..] x A[] œâ) M C[]]
‚Üí [Œ® ‚ä¢ oft Œî‚ÇÇ N A[]] ‚Üí [Œ® ‚ä¢ exh Œî‚ÇÇ] ‚Üí [Œ® ‚ä¢ merge Œî‚ÇÅ Œî‚ÇÇ Œî]
‚Üí [Œ® ‚ä¢ oft Œî M[..,N] C[]] =
  / total d (sub_lemœâ d) /
  fn d1, d2, e, m ‚áí
  let [_ ‚ä¢ M] = m in
  let [_ ‚ä¢ E] = e in
  let [_ ‚ä¢ cx/refl] = merge_id (merge_comm [_ ‚ä¢ M]) e in
  case d1 of
  | [_,x:obj ‚ä¢ oft/var (upd/n U1) (exh/c E1 _)] ‚áí
    let Prune-Upd [_ ‚ä¢ U2] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let [_ ‚ä¢ merge-upd2 U2a U2b ‚Ä¢/10 M2 _ _ _] = merge_upd_cor2 [_ ‚ä¢ U2] [_ ‚ä¢ M] [ ‚ä¢ ‚Ä¢/00] in
    let [_ ‚ä¢ cx/refl] = upd_refl2 [_ ‚ä¢ U2a] in
    let [_ ‚ä¢ cx/refl] = merge_id [_ ‚ä¢ M2] (prune_exh [_ ‚ä¢ E1]) in
    [_ ‚ä¢ oft/var U2b E]
  | [_,x:obj ‚ä¢ oft/vari U1 (exh/c E1 _)] ‚áí
    let [_ ‚ä¢ E2] = prune_exh [_ ‚ä¢ E1] in
    (case [_,x:obj ‚ä¢ U1] of
    | [_,x:obj ‚ä¢ upd/t _] ‚áí let [_ ‚ä¢ cx/refl] = merge_id [_ ‚ä¢ M] [_ ‚ä¢ E2] in d2
    | [_,x:obj ‚ä¢ upd/n U1'] ‚áí
      let [_,x:obj ‚ä¢ U1r] = upd_refl [_,x:obj ‚ä¢ U1'] in
      let Prune-Upd [_ ‚ä¢ U2] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1r] in
      [_ ‚ä¢ oft/vari U2 E2]
    )
  | [_,x:obj ‚ä¢ oft/lam \y.D1] ‚áí
    let [_,y:obj,x:obj ‚ä¢ D1'[..,x,y]] = oft_exch_top [_,x:obj,y:obj ‚ä¢ D1] in
    let [_,x:obj ‚ä¢ D2] = sub_lemœâ [_,x:obj,y:obj ‚ä¢ D1'] (oft_weak d2 [ ‚ä¢ _] [ ‚ä¢ hal/0]) [_,x:obj ‚ä¢ exh/c E[..] hal/0] [_,x:obj ‚ä¢ mg/c M[..] ‚Ä¢/10] in
    [_ ‚ä¢ oft/lam \x.D2]
  | [_,x:obj ‚ä¢ oft/app D1 D2 (mg/c M1 ‚Ä¢/œâœâ)] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let [_ ‚ä¢ M2_comm] = merge_comm [_ ‚ä¢ M2] in
    let [_ ‚ä¢ mg-assoc M3 _ _ _] = merge_assoc [_ ‚ä¢ M] [_ ‚ä¢ M2] in
    let [_ ‚ä¢ mg-assoc M5 _ _ _] = merge_assoc [_ ‚ä¢ M] [_ ‚ä¢ M2_comm] in
    let [_ ‚ä¢ cx/refl] = merge_id (merge_comm [_ ‚ä¢ M5]) e in
    let [_ ‚ä¢ cx/refl] = merge_id (merge_comm [_ ‚ä¢ M3]) e in
    let [_ ‚ä¢ D1'] = sub_lemœâ [_,x:obj ‚ä¢ D1] d2 e [_ ‚ä¢ M5] in
    let [_ ‚ä¢ D2'] = sub_lemœâ [_,x:obj ‚ä¢ D2] d2 e [_ ‚ä¢ M3] in
    [_ ‚ä¢ oft/app D1' D2' M2]
  | [_,x:obj ‚ä¢ oft/bang (exh/c E1 _) D1] ‚áí
    let [_ ‚ä¢ E2] = prune_exh [_ ‚ä¢ E1] in
    let [_ ‚ä¢ D2] = sub_lemœâ [_,x:obj ‚ä¢ D1] d2 e m in
    [_ ‚ä¢ oft/bang E2 D2]
  | [_,x:obj ‚ä¢ oft/letbang D1 (\y.D2) (mg/c M1 ‚Ä¢/œâœâ)] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let [_ ‚ä¢ M2_comm] = merge_comm [_ ‚ä¢ M2] in
    let [_ ‚ä¢ mg-assoc M3 _ _ _] = merge_assoc [_ ‚ä¢ M] [_ ‚ä¢ M2] in
    let [_ ‚ä¢ mg-assoc M5 _ _ _] = merge_assoc [_ ‚ä¢ M] [_ ‚ä¢ M2_comm] in
    let [_ ‚ä¢ cx/refl] = merge_id (merge_comm [_ ‚ä¢ M5]) e in
    let [_ ‚ä¢ cx/refl] = merge_id (merge_comm [_ ‚ä¢ M3]) e in
    let [_ ‚ä¢ D1'] = sub_lemœâ [_,x:obj ‚ä¢ D1] d2 e [_ ‚ä¢ M5] in
    let [_,y:obj,x:obj ‚ä¢ D2''[..,x,y]] = oft_exch_top [_,x:obj,y:obj ‚ä¢ D2] in
    let [_,x:obj ‚ä¢ D2'] = sub_lemœâ [_,x:obj,y:obj ‚ä¢ D2''] (oft_weak d2 [ ‚ä¢ _] [ ‚ä¢ hal/œâ]) [_,x:obj ‚ä¢ exh/c E[..] hal/œâ] [_,x:obj ‚ä¢ mg/c M3[..] ‚Ä¢/œâœâ] in
    [_ ‚ä¢ oft/letbang D1' (\x.D2') M2]
  ;