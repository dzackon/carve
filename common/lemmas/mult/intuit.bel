%======================================================%
% Algebraic properties of multiplicities
% (fully intuitionistic systems)
%======================================================%

% Totality: For any α₁, α₂, there exists an α such that α₁ ∙ α₂ = α

LF get∙ : mult → mult → type =
| get-∙ : • α₁ α₂ α → get∙ α₁ α₂;

rec mult_total : {α₁:[ ⊢ mult]} {α₂:[ ⊢ mult]} [ ⊢ get∙ α₁ α₂] =
  / total /
  mlam α₁, α₂ ⇒
  let [ ⊢ ω] = [ ⊢ α₁] in
  let [ ⊢ ω] = [ ⊢ α₂] in
  [ ⊢ get-∙ •/ωω]
  ;

% Functionality: If α₁ ∙ α₂ = α and α₁ ∙ α₂ = α', then α = α'

rec mult_func : [ ⊢ • α₁ α₂ α] → [ ⊢ • α₁ α₂ α'] → [ ⊢ mult_eq α α'] =
  / total /
  fn m1, m2 ⇒
  let [ ⊢ •/ωω] = m1 in
  let [ ⊢ •/ωω] = m2 in
  [ ⊢ mult/refl]
  ;

% Identity:
% (1) If α₁ ∙ α₂ = α and α₁ is an identity element, then α₂ = α
% (2) For any α, obtain an identity element β such that β • α = α

rec mult_id : [ ⊢ • α₁ α₂ α] → [ ⊢ ident α₁] → [ ⊢ mult_eq α₂ α] =
  / total /
  fn m, _ ⇒ let [ ⊢ •/ωω] = m in [ ⊢ mult/refl]
  ;

LF get_u∙ : mult → type =
| get-u∙ : ident β → • β α α → get_u∙ α;

rec mult_get_id : {α:[ ⊢ mult]} [ ⊢ get_u∙ α] =
  / total /
  mlam α ⇒ let [ ⊢ ω] = [ ⊢ α] in [ ⊢ get-u∙ ident/ω •/ωω]
  ;

% Zero-sum-freedom: If α₁ ∙ α₂ = α and α is an identity element, then α₁ = α

rec mult_zsfree : [ ⊢ • α₁ α₂ α] → [ ⊢ ident α] → [ ⊢ mult_eq α₁ α] =
  / total /
  fn m, _ ⇒ let [ ⊢ •/ωω] = m in [ ⊢ mult/refl]
  ;

% Commutativity: If α₁ ∙ α₂ = α, then α₂ ∙ α₁ = α

rec mult_comm : [ ⊢ • α₁ α₂ α] → [ ⊢ • α₂ α₁ α] =
  / total /
  fn M ⇒ let [ ⊢ •/ωω] = M in [ ⊢ •/ωω]
  ;

% Associativity: If (α₁ • α₂) • α₃ = α, then α₁ • (α₂ • α₃) = α

LF •assoc : • _ _ _ → • _ _ _ → type =
  •/assoc : • α₂ α₃ α₂₃ → • α₁ α₂₃ α → {M1:• α₁ α₂ α₁₂} {M2:• α₁₂ α₃ α} •assoc M1 M2;

rec mult_assoc : {M1:[ ⊢ • α₁ α₂ α₁₂]} {M2:[ ⊢ • α₁₂ α₃ α]} [ ⊢ •assoc M1 M2] =
  / total /
  mlam M1, M2 ⇒
  let [ ⊢ •/ωω] = [ ⊢ M1] in
  let [ ⊢ •/ωω] = [ ⊢ M2] in
  [ ⊢ •/assoc •/ωω •/ωω _ _]
  ;

% Cancellativity: If α₁ ∙ α₂ = α and α₁ ∙ α₂' = α, then α₂ = α₂'

rec mult_canc : [ ⊢ • α₁ α₂ α] → [ ⊢ • α₁ α₂' α] → [ ⊢ mult_eq α₂ α₂'] =
  / total /
  fn m1, m2 ⇒
  let [ ⊢ •/ωω] = m1 in
  let [ ⊢ •/ωω] = m2 in
  [ ⊢ mult/refl]
  ;

%------------------------------------------------------%
% Properties of harmless elements
%------------------------------------------------------%

% Technical lemmas about harmless elements (used to prove context lemmas)

rec mult_hal_id : [ ⊢ hal α] → [ ⊢ • α α α] =
  / total /
  fn u ⇒ let [ ⊢ hal/ω] = u in [ ⊢ •/ωω]
  ;

rec mult_ident_hal : [ ⊢ ident α] → [ ⊢ hal α] =
  / total /
  fn u ⇒ let [ ⊢ ident/ω] = u in [ ⊢ hal/ω]
  ;

rec mult_hal_ident : [ ⊢ hal α] → [ ⊢ ident α] =
  / total /
  fn u ⇒ let [ ⊢ hal/ω] = u in [ ⊢ ident/ω]
  ;
